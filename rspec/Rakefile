require 'bundler/gem_tasks'
require 'puppetlabs_spec_helper/rake_tasks'
require 'puppet-strings/tasks'
require 'rake/clean'

# Instead of write a `begin` block, I prefer to write a function (taking
# advantage of the implicit `begin` block).

# Build the docker image if it's not available.
def docker_build
  sh 'docker images | grep --quiet "^centos *6.6-msm"', verbose: false
rescue RuntimeError
  sh 'docker build --tag centos:6.6-msm .', verbose: false
end

# Delete the docker image, ignoring any error
def docker_rmi
  sh 'docker rmi --force centos:6.6-msm', verbose: false
rescue RuntimeError => error
  puts error.message
end

desc "Build the docker image if it doesn't exist"
task(:docker_build) { docker_build }

desc 'Deleted the created docker image'
task(:docker_rmi) { docker_rmi }

# `:clean` task is supposed to clean intermediate/temporary files
# `CLEAN` array tells which files to remove on `clean` task.
CLEAN.include %w(.yardoc coverage log junit)

# `:clobber` task is uspposed to clean final products. Requires `:clean` task.
# `CLOBBER` array tells which files to remove on `clobber` task.
CLOBBER.include %(doc pkg)

# You normally don't need to re-define `:spec_standalone`, but this is a
# special all-in-one project
Rake::Task[:spec_standalone].clear
RSpec::Core::RakeTask.new(:spec_standalone) do |rspec|
  specs = 'classes,defines,functions,types,brownbag,serverspec'
  rspec.pattern = "spec/{#{specs}}/**/*_spec.rb"
end

# Defining few sane requirements for the spec task. To me, it doesn't make any
# sense to run specs if validation, style checking and documentation fail.
task spec: [:validate, :lint, :rubocop, :'strings:generate']

# Again, doesn't make any sense to run acceptance specs if standard specs fail.
desc 'Run the acceptance specs'
RSpec::Core::RakeTask.new acceptance: [:spec, :docker_build] do |rspec|
  rspec.pattern = 'spec/acceptance/**/*_spec.rb'
end

# Building a module/gem obviously depends on all specs being met.
task :build, [:acceptance]
